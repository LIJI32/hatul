#!/usr/bin/env python
# coding: utf-8
#
# a חתול! interpreter written in python
#
# you can wrap the memory pointer to the end of the the memory cells
# but you cannot do the same trick to get the first cell, since going
# further out would just initiate a new memory cell.
#
# 2001 (C) Øyvind Grønnesby <oyving@pvv.ntnu.no>
#
# 2003-02-06: Thanks to John Farrell for spotting a bug!
#
# 2014-03-31 Created a חתול! interpreter based on Grønnesby's Ook interpreter.
#
# 2014-05-23 Added support for חתול טעים! syntax in the interpreter.

import sys, string, types
import re

def massage(text):
    return re.sub('[ \\t\\n\\r]+', ' ',re.sub('#.*?\n', '', text))

class TulInterpreter:

    memory = [0]
    memptr = 0
    file   = None
    code   = None
    len    = 0
    codei  = 0

    def not_tasty(self):
        self.lang   = {
        'חתול. חתול? ' : self.mvptrup,
                       'חתול? חתול. ' : self.mvptrdn,
                       'חתול. חתול. ' : self.incptr,
                       'חתול! חתול! ' : self.decptr,
                       'חתול. חתול! ' : self.readc,
                       'חתול! חתול. ' : self.prntc,
                       'חתול! חתול? ' : self.startp,
                       'חתול? חתול! ' : self.endp
                       }
    def tasty(self):
       self.lang   = {
       'חתול. ' : self.mvptrup,
                      'טעים. ' : self.mvptrdn,
                      'חתול! ' : self.incptr,
                      'טעים! ' : self.decptr,
                      'חתול טעים? ' : self.readc,
                      'חתול טעים. ' : self.prntc,
                      'חתול? ' : self.startp,
                      'טעים? ' : self.endp
                       }

    def mem(self):
        return self.memory[self.memptr]

    def __init__(self, file):
        self.not_tasty()
        self.file = open(file)
        self.code = massage(self.file.read())
        self.file.close()
        self.cmds()

    def run(self):
        self.codei = 0
        self.len  = len(self.code)
        while self.codei < self.len:
            self.code[self.codei][1]()
            self.codei += 1

    def cmds(self):
        code = self.code
        new = []
        while code:
            if code.startswith("חתול טעים! "):
                self.tasty()
                code = code[len("חתול טעים! "):]
                continue
                
            if code.startswith("לא טעים! "):
                self.not_tasty()
                code = code[len("לא טעים! "):]
                continue
                
            for phrase, func in self.lang.iteritems():
                if code.startswith(phrase):
                    new.append((phrase, func))
                    code = code[len(phrase):]
                    break
            else:
                print code
                raise Exception("TulSyntaxError", 'Unexpected %s' % (' '.join(code.split(' ')[:2]),))
                
        self.code = new

    def startp(self):
        tul = 0
        i   = self.codei
        if self.memory[self.memptr] != 0:
            return None
        while 1:
            i += 1
            if self.code[self.codei][1] == self.startp:
                tul += 1
            if self.code[self.codei][1] == self.endp:
                if tul == 0:
                    self.codei = i
                    break
                else:
                    tul -= 1
            if i >= self.len:
                raise Exception("TulSyntaxError", 'Unmatched "%s".' % (self.code[self.codei][0],))

    def endp(self):
        tul = 0
        i   = self.codei
        if self.memory[self.memptr] == 0:
            return None
        if i == 0:
            raise Exception("TulSyntaxError", 'Unmatched "%s".' % (self.code[self.codei][0],))
        while 1:
            i -= 1
            if self.code[i][1] == self.endp:
                tul += 1
            if self.code[i][1] == self.startp:
                if tul == 0:
                    self.codei = i
                    break
                else:
                    tul -= 1
            if i <= 0:
                raise Exception("TulSyntaxError", 'Unmatched "%s".' % (self.code[self.codei][0],))

    def incptr(self):
        self.memory[self.memptr] += 1

    def decptr(self):
        self.memory[self.memptr] -= 1

    def mvptrup(self):
        self.memptr += 1
        if len(self.memory) <= self.memptr:
            self.memory.append(0)

    def mvptrdn(self):
        if self.memptr == 0:
            self.memptr = len(self.memory) - 1
        else:
            self.memptr -= 1

    def readc(self):
        self.memory[self.memptr] = ord(sys.stdin.read(1))

    def prntc(self):
        sys.stdout.write(chr(self.mem()))


if __name__ == '__main__':
    o = TulInterpreter(sys.argv[1])
    o.run()
